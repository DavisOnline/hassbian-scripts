#!/bin/bash
LOGFILE=/tmp/hassbian.log
SUITE_INSTALL_DIR=/opt/hassbian/suites
SUITE_CONTROL_DIR=/srv/homeassistant/hassbian/control

function usage {
  printf "使用方法：hassbian-config [command] [suite] [options]\\n"
  printf "运行 'hassbian-config --help' 查看所有选项\\n"
  return 0
}

function help {
  printf "hassbian-config\\n"
  printf "%s\\n" "版本: $(hassbian-config -V)"
  printf "\\n"
  printf "使用方法: hassbian-config [command] [suite] [options]\\n"
  printf "主命令 [command]:\\n"
  printf "%-8s\\t%s\\n" "  install" "安装软件 [suite]"
  printf "%-8s\\t%s\\n" "  upgrade" "升级软件 [suite]"
  printf "%-8s\\t%s\\n" "  show" "查看可供安装/升级的软件 [suite]"
  printf "%-8s\\t%s\\n" "  log" "显示上次操作log"
  printf "%-8s\\t%s\\n" "  share-log" "生成上次操作的 hastebin 链接"
  printf "%-8s\\t%s\\n" "  show-installed" "显示已安装软件清单"
  printf "\\n"
  printf "可选参数 [options]:\\n"
  printf "%-10s\\t%s\\n" " -Y | --accept" "使用脚本中所有默认选项"
  printf "%-10s\\t%s\\n" " -F | --force" "强制运行脚本,可用于软件重装"
  printf "%-10s\\t%s\\n" " -D | --debug" "Debug模式，输出所有命令"
  printf "%-10s\\t%s\\n" " -B | --beta" "安装 beta 版本软件"
  printf "%-10s\\t%s\\n" " --dev" "安装 dev 开发版本软件
  printf "其他命令 [command] :\\n"
  printf "%-10s\\t%s\\n" " -V | --version" "显示 hassbian-config 当前版本"
  printf "%-10s\\t%s\\n" " -H | --help" "显示此帮助页面"
  printf "\\n"
  return 0
}

function show-suite-info {
  source $SUITE_INSTALL_DIR/"$1".sh
  "$1"-show-short-info
  return 0
}

function get-all-suite-installers {
  ALLSUITES=$(find $SUITE_INSTALL_DIR/ -maxdepth 1 -type f | sort | awk -F'/' ' {print $NF}' | awk -F. '{print $1}')
  echo "$ALLSUITES"
  return 0
}

function show-suites {
  printf "hassbian-config 软件包列表\\n"
  printf "如果某个\\e[1m软件\\e[0m显示为\\e[32m绿色\\e[0m 则表示你已安装此软件\\n"
  printf "\\n"
  printf "可安装软件: (使用 'sudo hassbian-config install \\e[1m软件名\\e[0m')\\n"
  installers=$(get-all-suite-installers)
  for i in $installers
  do
    if [ -f $SUITE_CONTROL_DIR/"$i" ]; then
      SUITESTATE=$(grep "SCRIPTSTATE" $SUITE_CONTROL_DIR/"$i" | awk -F'=' '{print $2}')
    else
      SUITESTATE=""
    fi
    INSTALLER=$(grep "$i"-install-package $SUITE_INSTALL_DIR/"$i".sh)
    if [ "$INSTALLER" != "" ]; then
      if [ "$SUITESTATE" == "installed" ]; then
        printf "\\e[1m\\e[32m%-20s\\e[0m %s\\n" "$i" "$(show-suite-info "$i")"
      else
        printf "\\e[1m%-20s\\e[0m %s\\n" "$i" "$(show-suite-info "$i")"
      fi
    fi
  done
  printf "\\n"
  printf "可升级软件: (使用 'sudo hassbian-config upgrade \\e[1m软件名\\e[0m')\\n"
  for i in $installers
  do
    UPGRADE=$(grep "$i"-upgrade-package $SUITE_INSTALL_DIR/"$i".sh)
    if [ "$UPGRADE" != "" ]; then
      printf "\\e[1m%-20s\\e[0m %s\\n" "$i" "$(show-suite-info "$i")"
    fi
  done
  printf "查询具体软件包详情请执行：'hassbian-config show \e[32m软件包名称\e[0m'"
  return 0
}

function show-suite-long-info {
  source $SUITE_INSTALL_DIR/"$1".sh
  "$1"-show-short-info
  "$1"-show-long-info
  "$1"-show-copyright-info
  return 0
}

function check-permission {
  if (( EUID != 0 ))
  then
    echo "错误：hassbian-config 必须以 root (或 sudo) 用户运行"
    exit 1
  fi
  return 0
}

function raspberry_pi_zero_check {
## Start check for Raspberry Pi Zero
if [ "$FORCE" != "true" ]; then
  REVCODE=$(sudo cat /proc/cpuinfo | grep 'Revision' | awk '{print $3}' | sed 's/^ *//g' | sed 's/ *$//g')
  if [ "$REVCODE" = "90092" ] || [ "$REVCODE" = "90093" ] || [ "$REVCODE" = "0x9000C1" ]; then
    if [[ "$1" =~ ^(mosquitto|homebridge|cloud9)$ ]]; then
      echo "This suite can't be installed on Raspberry Pi Zero..."
      exit 0
    fi
  fi
fi
## End check for Raspberry Pi Zero

}
function share-log {
  if [ ! -f $LOGFILE ];then
    echo "无 Log 文件, 退出..."
    return 0
  fi
  if [ "$ACCEPT" == "true" ]; then
    loglink=$(curl -X POST -s -d "$(cat "$LOGFILE")" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}')
    if [[ $loglink != *"initial"*  ]]; then
      echo "$loglink"
    else
      echo "请检查网络连接或 Hastebin API"
      echo "请重试"
      return 0
    fi
  else
    echo "此步骤将上传你的之前操作到 hastebin"
    echo "此举可能会产生隐私问题"
    echo "如果你不确定具体包含的内容, 可以执行 'hassbian-config log' 确认."
    echo -n "是否想创建 hastebin 链接? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
      loglink=$(curl -X POST -s -d "$(cat "$LOGFILE")" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}')
      if [[ $loglink != *"initial"*  ]]; then
        echo "$loglink"
      else
        echo
        echo "网络错误"
        echo "请重试"
        return 0
      fi
    fi
  fi
  return 0
}

function run-suite { #This is the function the actually run install/upgrade.
  source "$SUITE_INSTALL_DIR/$2".sh #Sourcing the script file.
  "$2"-show-short-info && "$2"-show-copyright-info && printf "\\n" #Prints suite-show-short-info & suite-show-copyright-info to console.
  if [ "$DEBUG" == "true" ]; then set -x; fi #Activating debug if --debug is used.
  "$2"-"$1"-package #Running the script function install/upgrade SUITE.
  RETURN=("$?") # Return value after script execution.
  if [ "$DEBUG" == "true" ]; then set +x; fi #Deactivating debug if --debug is used.
  if [ "$RETURN" == "0" ]; then STATE="installed"; else printf "\\e[0mIf you have issues with this script, please say something in the #devs_hassbian channel on Discord.\\n" && STATE="failed"; fi #Set suite state to installed if 0 is returned, failed otherwise.
  echo "SCRIPTSTATE=$STATE" > "$SUITE_CONTROL_DIR/$2" #Setting status in control file.
  return 0
}

function install-suite { #This function do checks if we can/want to install.
  check-permission
  raspberry_pi_zero_check "$1"
  INSTALL=$(grep "$1"-install-package "$SUITE_INSTALL_DIR/$1".sh) #Checking if suite has install function.
  SUITESTATE=$(if [ -f "$SUITE_CONTROL_DIR/$1" ]; then grep "SCRIPTSTATE" "$SUITE_CONTROL_DIR/$1" | awk -F'=' '{print $2}'; else echo ""; fi) #Checking current suite state.
  if [ "$FORCE" == "true" ]; then #Go straight to run-suite if --force is used.
    run-suite install "$1" | tee "$LOGFILE" #Run if -F/-f/--force is used.
  elif [ "$SUITESTATE" == "installed" ] || [ "$INSTALL" == "" ]; then #Try redirect to upgrade script if already installed.
    printf "%s 已安装或此软件安装脚本不可用...\\n" "$1"
    UPGRADE=$(grep "$1"-upgrade-package "$SUITE_INSTALL_DIR/$1".sh)
    if [ "$UPGRADE" == "" ]; then
      printf "升级脚本不可用...\\n\\n你可以强制执行安装脚本:\\nsudo hassbian-config install %s --force\\n" "$1"
      return 0
    fi
    printf " %s 已找到, 执行中...\\n\\n" "$1"
    run-suite upgrade "$1" | tee "$LOGFILE" #Redirects to upgrade script.
  else
    run-suite install "$1" | tee "$LOGFILE" #This is the default run, if no options is used.
  fi
  return 0
}

function upgrade-suite { #This function do checks if we can to upgrade.
  check-permission
  UPGRADE=$(grep "$1"-upgrade-package "$SUITE_INSTALL_DIR/$1".sh) #Checking if suite has upgrade function.
  if [ "$UPGRADE" == "" ]; then
    printf "升级脚本不可用...\\n\\n你可以强制安装:\\nsudo hassbian-config install %s --force\\n" "$1"
    return 0
  fi
  run-suite upgrade "$1" | tee "$LOGFILE" #This is the default run.
  return 0
}

function verify-suite {
  if [ -f "$SUITE_INSTALL_DIR/$1.sh" ]; then
    retval=0 # beware - 0 is true in bash.
  else
    retval=1
  fi
  return $retval
}

function show-installed-suites {
  INSTALLERS=$(find $SUITE_INSTALL_DIR/ -maxdepth 1 -type f | sort | awk -F'/' ' {print $NF}' | awk -F. '{print $1}')
  echo "These suites are installed:"
  for i in $INSTALLERS
  do
  if [ -f "$SUITE_CONTROL_DIR/$i" ]; then
    STATE=$(grep "SCRIPTSTATE=installed" $SUITE_CONTROL_DIR/"$i" | awk -F'=' '{print $2}')
    if [ "$STATE" != "" ]; then
      echo "$i"
    fi
  fi
  done
  return 0
}

if [ $# -lt 1 ]; then
  usage
  exit 0
fi

while [[ $# -gt 0 ]]
do
COMMAND=$1
SUITE=$2

case $COMMAND in
  "-F"|"-f"|"--force")
    FORCE="true"
    shift # past argument
    ;;
  "-Y"|"-y"|"--accept")
    ACCEPT="true"
    shift # past argument
    ;;
  "-D"|"--debug")
    DEBUG="true"
    shift # past argument
    ;;
  "--dev")
    DEV="true"
    shift # past argument
    ;;
  "-B"|"--beta")
    BETA="true"
    shift # past argument
    ;;
  "show")
    if [ "$SUITE" != "" ]; then
      if verify-suite "$SUITE"; then
        RUN="show-suite-long-info $SUITE"
      else
        RUN="echo 软件包 $SUITE 不存在"
      fi
    else
      RUN="show-suites"
    fi
    shift # past argument
    shift # past value
    ;;
  "install")
    if verify-suite "$SUITE"; then
      RUN="install-suite $SUITE"
    else
      RUN="echo suite $SUITE doesn't exist."
    fi
    shift # past argument
    shift # past value
    ;;
  "upgrade")
    if [[ "$SUITE" = *"="* ]]; then
      VERSIONNUMBER=$(echo "$SUITE" | awk -F'=' '{print $2}')
      SUITE=$(echo "$SUITE" | awk -F'=' '{print $1}')
    else
      VERSIONNUMBER=""
    fi
    if verify-suite "$SUITE"; then
      RUN="upgrade-suite $SUITE"
    else
      RUN="echo 软件包 $SUITE 不存在"
    fi
    shift # past argument
    shift # past value
    ;;
  "log")
    RUN="more $LOGFILE"
    shift # past argument
    ;;
  "share-log")
    RUN="share-log"
    shift # past argument
    ;;
  "-V"|"--version")
    VERSION=$(dpkg -s hassbian-scripts | grep 'Version:' | awk '{print $2}')
    RUN="echo $VERSION"
    shift # past argument
    ;;
  "show-installed")
    RUN="show-installed-suites"
    shift # past argument
    ;;
  "-H"|"--help")
    RUN="help"
    shift # past argument
    ;;
  *)
    RUN="usage"
    shift # past argument
  ;;
esac
done
if [ "$RUN" != "" ]; then
  $RUN
  exit 0
fi
exit 0
