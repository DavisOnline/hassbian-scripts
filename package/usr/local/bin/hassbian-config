#!/bin/bash
LOGFILE=/tmp/hassbian.log
SUITE_INSTALL_DIR=/opt/hassbian/suites
SUITE_CONTROL_DIR=/srv/homeassistant/hassbian/control

function usage {
  printf "使用方法：hassbian-config [command] [suite] [options]\\n"
  printf "运行 'hassbian-config --help' 查看所有选项\\n"
  return 0
}

function help {
  printf "hassbian-config\\n"
  printf "%s\\n" "version: $(hassbian-config -V)"
  printf "\\n"
  printf "使用：hassbian-config [command] [suite] [options]\\n"
  printf "其中命令 [command] 为：\\n"
  printf "%-8s\\t%s\\n" "  install" "安装软件包 [suite]"
  printf "%-8s\\t%s\\n" "  upgrade" "升级软件包 [suite]"
  printf "%-8s\\t%s\\n" "  show" "查看可供安装或升级的软件包 [suite]"
  printf "%-8s\\t%s\\n" "  log" "显示上次操作日志"
  printf "%-8s\\t%s\\n" "  share-log" "生成上次操作日志的 hastebin 代码共享链接"
  printf "\\n"
  printf "可选变量 [options]:\\n"
  printf "%-10s\\t%s\\n" " -y | --accept" "安装过程中接受所有预设"
  printf "%-10s\\t%s\\n" " -f | --force" "强制运行脚本，在重装软件时特别管用"
  printf "\\n"
  printf "其他命令 [command] :\\n"
  printf "%-10s\\t%s\\n" " -V | --version" "显示 hassbian-config 当前版本"
  printf "%-10s\\t%s\\n" " -H | --help" "显示此帮助页面"
  printf "\\n"
  return 0
}

function show-suite-info {
  source $SUITE_INSTALL_DIR/"$1".sh
  "$1"-show-short-info
  return 0
}

function get-all-suite-installers {
  ALLSUITES=$(find $SUITE_INSTALL_DIR/ -maxdepth 1 -type f | sort | awk -F'/' ' {print $NF}' | awk -F. '{print $1}')
  echo "$ALLSUITES"
  return 0
}


function show-suites {
  echo -e "安装软件包: (使用 'sudo hassbian-config install \e[32msuite-name\e[0m')"
  installers=$(get-all-suite-installers)
  for i in $installers
  do
    if [ ! -f $SUITE_CONTROL_DIR/"$i" ]; then
      SUITESTATE=""
    else
      SUITESTATE=$(grep SCRIPTSTATE $SUITE_CONTROL_DIR/"$i" | awk -F'=' '{printf $2}')
      SUITESTATE=$(printf "\e[34m $SUITESTATE%-7s")
    fi
    printf "\e[32m%-20s\e[0m %s\n" "$i$SUITESTATE" "$(show-suite-info "$i")"
  done
  echo -e "查询具体软件包详情请执行：'hassbian-config show \e[32msuite-name\e[0m'"
  return 0
}

function show-suite-long-info {
  source $SUITE_INSTALL_DIR/"$1".sh
  "$1"-show-short-info
  "$1"-show-long-info
  "$1"-show-copyright-info
  return 0
}

function check-permission {
  if (( EUID != 0 ))
  then
    echo "错误：hassbian-config 必须以 root (或 sudo) 用户运行"
    exit 1
  fi
  return 0
}

function share-log {
  if [ "$ACCEPT" == "true" ]; then
    a=$(cat $LOGFILE); curl -X POST -s -d "$a" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}'
  else
    echo "此步骤将上传你的之前操作到 hastebin"
    echo "此举可能会产生隐私问题"
    echo "如果你不确定具体包含的内容, 可以执行 'hassbian-config log' 确认."
    echo -n "是否想创建 hastebin 链接? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
      echo ""
    a=$(cat $LOGFILE); curl -X POST -s -d "$a" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}'
    fi
  fi
  return 0
}

function install-suite {
  if [ "$(id -u)" != "0" ]; then
    echo "此脚本必须以 sudo 用户运行。请使用 'sudo hassbian-config install $1'" 1>&2
    return 1
  fi
  if [ ! -f $SUITE_CONTROL_DIR/"$1" ]; then
    touch $SUITE_CONTROL_DIR/"$1"
    echo "SCRIPTSTATE=uninstalled" > $SUITE_CONTROL_DIR/"$1"
  fi
    SUITESTATE=$(grep "SCRIPTSTATE" $SUITE_CONTROL_DIR/"$1" | awk -F'=' '{print $2}')
    source $SUITE_INSTALL_DIR/"$1".sh
  if [ "$FORCE" == "true" ]; then
    "$1"-install-package | tee $LOGFILE
    sed -i -- 's/SCRIPTSTATE='"$SUITESTATE"'/SCRIPTSTATE=installed/g' $SUITE_CONTROL_DIR/"$1"
  elif [ "$SUITESTATE" == "installed" ]; then
    echo "$1 已安装，尝试升级脚本..."
    UPGRADE=$(grep "$1"-upgrade-package $SUITE_INSTALL_DIR/"$1".sh)
  if [ "$UPGRADE" == "" ]; then
    echo "升级脚本不可用..."
    echo "你可以进行强制安装："
    echo "sudo hassbian-config -f install $1"
    exit
  fi
    "$1"-upgrade-package | tee $LOGFILE
    sed -i -- 's/SCRIPTSTATE='"$SUITESTATE"'/SCRIPTSTATE=installed/g' $SUITE_CONTROL_DIR/"$1"
  else
    source $SUITE_INSTALL_DIR/"$1".sh
    "$1"-install-package | tee $LOGFILE
    sed -i -- 's/SCRIPTSTATE='"$SUITESTATE"'/SCRIPTSTATE=installed/g' $SUITE_CONTROL_DIR/"$1"
  fi
  return 0
}

function upgrade-suite {
  if [ "$(id -u)" != "0" ]; then
    echo "此脚本必须以 sudo 用户运行。请使用 'sudo hassbian-config upgrade $1'" 1>&2
    return 1
  fi
  UPGRADE=$(grep "$1"-upgrade-package $SUITE_INSTALL_DIR/"$1".sh)
  if [ "$UPGRADE" == "" ]; then
    echo "升级脚本不可用..."
    echo "你可以进行强制安装："
    echo "sudo hassbian-config -f install $1"
  fi
  check-permission
  source $SUITE_INSTALL_DIR/"$1".sh
  "$1"-upgrade-package | tee $LOGFILE
  return 0
}

function verify-suite {
  if [ -f "$SUITE_INSTALL_DIR/$1.sh" ]; then
    retval=0 # beware - 0 is true in bash.
  else
    retval=1
  fi
  return $retval
}

function show-installed-suites {
  INSTALLERS=$(find $SUITE_INSTALL_DIR/ -maxdepth 1 -type f | sort | awk -F'/' ' {print $NF}' | awk -F. '{print $1}')
  for i in $INSTALLERS
  do
  if [ -f "$SUITE_CONTROL_DIR/$i" ]; then
    STATE=$(grep "SCRIPTSTATE=installed" $SUITE_CONTROL_DIR/"$i" | awk -F'=' '{print $2}')
    if [ "$STATE" != "" ]; then
      echo "$i:" "$STATE"
    fi
  fi
  done
  return 0
}

if [ $# -lt 1 ]; then
  usage
  exit 0
fi

while [[ $# -gt 0 ]]
do
COMMAND=$1
SUITE=$2


case $COMMAND in
  "-f"|"--force")
    FORCE="true"
    shift # past argument
    ;;
  "-y"|"--accept")
    ACCEPT="true"
    shift # past argument
    ;;
  "show")
    if [ "$SUITE" != "" ]; then
      if verify-suite "$SUITE"; then
        RUN="show-suite-long-info $SUITE"
      else
        RUN="echo 软件包 $SUITE 不存在"
      fi
    else
      RUN="show-suites"
    fi
    shift # past argument
    shift # past value
    ;;
  "install")
    if verify-suite "$SUITE"; then
      RUN="install-suite $SUITE"
    else
      RUN="echo suite $SUITE doesn't exist."
    fi
    shift # past argument
    shift # past value
    ;;
  "upgrade")
    if verify-suite "$SUITE"; then
      RUN="upgrade-suite $SUITE"
    else
      RUN="echo 软件包 $SUITE 不存在"
    fi
    shift # past argument
    shift # past value
    ;;
  "log")
    RUN="more $LOGFILE"
    shift # past argument
    ;;
  "share-log")
    RUN="share-log"
    shift # past argument
    ;;
  "-V"|"--version")
    VERSION=$(dpkg -s hassbian-scripts | grep 'Version:' | awk '{print $2}')
    RUN="echo $VERSION"
    shift # past argument
    ;;
  "show-installed")
    RUN="show-installed-suites"
    shift # past argument
    ;;
  "-H"|"--help")
    RUN="help"
    shift # past argument
    ;;
  *)
    RUN="usage"
    shift # past argument
  ;;
esac
done
if [ "$RUN" != "" ]; then
  $RUN
  exit
fi
exit 0
